{% comment %}
Template for generation of XML scheme of the whole interface view.
The following tags are available in this template:
Functions           : List of all available NON-nested functions (provided by application)
func                :   |_ Instance of function
Connections         : List of all available NON-nested connections (provided by application). Connections between top-level functions;
conn                :   |_ Instance of connection
ConnectionGroups    : List of all available NON-nested connection groups (provided by application). Grouped connections between top-level functions;
conngroups          :   |_ Instance of connection
Comments            : List of all available NON-nested comments (provided by application)
comm                :   |_ Instance of comment
{% endcomment %}
---------------------------------------------------
-- AADL2.2
-- TASTE type interfaceview
-- 
-- generated code: do not edit
---------------------------------------------------

package mypackage
public
-- Handle Functions ------------------------------
{% for func in Functions %}
	{% for attribute in func.attributes %}
		{% if attribute.name == "component"%}
			{% if attribute.value == "abstract" %}
abstract {{ func.name }}
			{% else %} 
system {{func.name }} 
			{%endif%}
		{% endif %}
	{% endfor %}
	{% if func.interfaces != 0 %}
	features
		{% for iface in func.interfaces %}
		{{ iface.name }}: {% if iface.isProvided %}in{%else%}out{%endif%} event data port;
						{% endfor %}
		{%endif%}
end {{func.name}};
{% endfor %}
-- End of Handling Functions ------------------------------



-- Handle My Functions ------------------------------
{% for func in MyFunctions %}
abstract {{ func.name|lower }}
{% if func.interfaces != 0 %}
	features
	{% for iface in func.interfaces %}
		{% if iface.isProvided %}PI_{%else%}RI_{%endif%}{{ iface.name }}: {% if iface.isProvided %}in{%else%}out{%endif%} event data port;
	{% endfor %}
	{% for attr in func.attributes %}
		{% if attr.name == "publisher_name" %}
		{{ attr.value }}: out event data port;
		{%endif%}
	{% endfor %}
	{% for attr in func.attributes %}
	{% if attr.name == "subscriber_name" %}
		{{ attr.value }}: in event data port;
		{%endif%}
	{% endfor %}
{%endif%}
end {{func.name}};
{% endfor %}
-- End of Handling My Functions ------------------------------

-- Create broker if pub exists -------------------------------
{% with MyFunctions|dictsort:"subscriber_name" as sortedList%}
{% for func in sortedList %}
{% if forloop.last and func.subscriber_name != "" %}
abstract broker
	features
		{% for func in MyFunctions %}{% for attr in func.attributes %}{%if attr.name == "publisher_name" or attr.name == "subscriber_name" %}{%if attr.name == "publisher_name" %}{{attr.value}}_out: out{%elif attr.name == "subscriber_name" %}{{attr.value}}_in: in{%endif%} event data port;
		{%endif%}{%endfor %} {%endfor%}
end broker;
{%endif%}
{%endfor%}
{%endwith%}
-- Ending of creating broker ------------------------------------


{% comment %}
The method above is probably best and closer to the actual goal. Just keeping this here to see how to use tags and filters if I'm in doubt
-- Create broker if pub exists alternate method

{% for func in MyFunctions %}{% for attr in func.attributes %}{%if attr.name == "publisher_name" %}Attr name:{{attr.name}}, For loop first:{{ forloop.first }}
abstract broker
	features
		{% for func in MyFunctions %}{% for attr in func.attributes %}{%if attr.name == "publisher_name" or attr.name == "subscriber_name" %}{%if attr.name == "publisher_name" %}{{attr.value}}_in: in{%elif attr.name == "subscriber_name" %}{{attr.value}}_out: out{%endif%} event data port;
		{%endif%}{%endfor %} {%endfor%}
end broker;
{%endif%}{%endfor%}{%endfor%}

-- Ending of creating broker alternate method
{% endcomment %}

{%for func in MyFunction%}
{{func.publisher}}
{%endfor%}
-- Create system ------------------------
system mySystem
end mySystem;

system implementation mySystem.impl
{% if Functions|length > 0 or MyFunctions|length > 0 %}
	subcomponents
  	{% for func in Functions %}
		{{func.name}}: {% for attribute in func.attributes %}{% if attribute.name == "component"%}{% if attribute.value == "abstract" %}abstract {{ func.name }}{% else %}system {{func.name }}{%endif%}{% endif %}{% endfor %};
	{%endfor%}
	 {% for func in MyFunctions %}
		{{func.name}}: abstract {{func.name}};
	{%endfor%}
		broker: abstract broker;
{% endif %}

{% if Connections|length > 0 or MyFunctions|length > 0 %}
	connections
  	{% for conn in Connections %}
  	  	{{conn.source}}_{{conn.target}}_{{conn.siName}}: port {% if conn.siIsRequired%}{{conn.source}}.RI_{{conn.siName}}{%else%}{{conn.target}}.PI_{{conn.tiName}}{%endif%} -> {% if conn.tiIsProvided%}{{conn.target}}.PI_{{conn.siName}}{%else%}{{conn.target}}.RI_{{conn.tiName}}{%endif%}
  	    {Timing => Immediate;}; 	
  	{% endfor %}

	{% for func in MyFunctions %}{%for attr in func.attributes %}
	{%if attr.name == "publisher_name" %}
		{{func.name}}_{{attr.value}}: port {{func.name}}.{{attr.value}} -> broker.{{attr.value}}_in {Timing => Immediate;};	
	{%elif attr.name == "subscriber_name" %}
		{{func.name}}_{{attr.value}}: port broker.{{attr.value}}_out -> {{func.name}}.{{attr.value}} {Timing => Immediate;};	
	{%endif%}{%endfor%}{%endfor%}

  {% endif %}
end mySystem.impl;
-- End of Creating system ------------------------

end mypackage;




